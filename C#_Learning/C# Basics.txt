// Random dice = new Random();
// int roll = dice.Next(1, 7);
// Console.WriteLine(roll);
// Console.WriteLine(dice.Next(1, 7));

// Console.Write("enter num: ");
// int num = Convert.ToInt32(Console.ReadLine());
// if (roll == num)
// {
//     Console.WriteLine("you win");
// }
// else
// {
//     Console.WriteLine("you lose");
// }
// Console.WriteLine($"the correct num is {roll}");

// int firstValue = 5005323;
// int secondValue = 600;
// int largerValue;
// // if (firstValue > secondValue)
// // {
// //     largerValue = firstValue;
// // }
// // else
// // {
// //     largerValue = secondValue;
// // }
// largerValue = Math.Max(firstValue, secondValue);
// Console.WriteLine(largerValue);


// Random dice = new Random();

// int roll1 = dice.Next(1, 7);
// int roll2 = dice.Next(1, 7);
// int roll3 = dice.Next(1, 7);

// int total = roll1 + roll2 + roll3;
// if (total > 14)
// {
//     Console.WriteLine($"You win!. your score is {total}");
// }

// if (total < 15)
// {
//     Console.WriteLine($"Sorry, you lose. your score is {total}");
// }

// // Console.WriteLine($"Dice roll: {roll1} + {roll2} + {roll3} = {total}");



// Random random = new Random();
// int daysUntilExpiration = random.Next(12);
// int discountPercentage = 0;

// // Your code goes here
// if (daysUntilExpiration == 0)
// {
//     Console.WriteLine("Your subscription has expired.");
// }
// else if (daysUntilExpiration == 1)
// {
//     Console.WriteLine($"Your subscription expires within a day! if you subscribe now you {discountPercentage}");
//     discountPercentage = 20;
// }



// string[] fraudulentOrderIDs = new string[7];
// fraudulentOrderIDs = ["gdsh", "dshgd", "gdashfn", "shdhds"];


// for (int i = 0; i < fraudulentOrderIDs.Length; i++)
// {
//     Console.WriteLine(fraudulentOrderIDs[i]);
//     if (fraudulentOrderIDs[i].StartsWith("g"))
//     {
//         Console.WriteLine($"the order id {fraudulentOrderIDs[i]} starts with B");
//     }
// }

// Console.WriteLine("out put from for each");
// foreach (string fraud in fraudulentOrderIDs)
// {
//     Console.WriteLine(fraud);
// }


// Console.WriteLine("a" == "a");
// Console.WriteLine("a" == "A");
// Console.WriteLine(1 == 2);

// string value1 = " a";
// string value2 = "A ";
// // Console.WriteLine(value1.Trim().ToLower() == value2.Trim().ToLower());


// Console.WriteLine(value1.ToUpper().Trim() == value2.Trim().ToUpper());
// Console.WriteLine(1 != 2);


// string pangram = "The quick brown fox jumps over the lazy dog.";
// Console.WriteLine(pangram.Contains("fox"));
// Console.WriteLine(!pangram.Contains("cow"));


// int discount = 1000 > 1000 ? 10 : 0;
// Console.Write(discount);

// Random num = new Random();
// int dice = num.Next(1, 7);
// Console.WriteLine(dice);
// string win = dice > 3 ? "wins" : "0";
// Console.Write(win);

// int[] numbers = { 4, 8, 15, 16, 23, 42 };
// bool found = false;
// int total = 0;
// foreach (int number in numbers)
// {


//     total += number;

//     if (number == 42)
//     {
//         found = true;

//     }

// }

// if (found)
// {
//     Console.WriteLine("Set contains 42");

// }

// Console.WriteLine($"Total: {total}");

// string[] fruits = { "apple", "banana", "cherry", };
// foreach (var fruit in fruits)
// {
//     switch (fruit)
//     {
//         case "apple":
//             Console.WriteLine($"App will display information for apple.");
//             break;

//         case "banana":
//             Console.WriteLine($"App will display information for banana.");
//             break;

//         case "cherry":
//             Console.WriteLine($"App will display information for cherry.");
//             break;
//     }
// }

// int employeeLevel = 201;
// string employeeName = "John Smith";

// string title = "";

// switch (employeeLevel)
// {
//     case 100:
//         title = "Junior Associate";
//         break;
//     case 200:
//         title = "Senior Associate";
//         break;
//     case 300:
//         title = "Manager";
//         break;
//     case 400:
//         title = "Senior Manager";
//         break;
//     default:
//         title = "Associate";
//         break;
// }

// Console.WriteLine($"{employeeName}, {title}");



// string[] names = { "Alex", "Eddie", "David", "Michael" };
// for (int i = names.Length - 1; i >= 0; i--)
// {
//     Console.WriteLine(names[i]);
// }



// string[] names = { "Alex", "Eddie", "David", "Michael" };
// for (int i = 0; i < names.Length; i++)
//     if (names[i] == "David") names[i] = "Sammy";

// foreach (var name in names) Console.WriteLine(name);


// Random random = new Random();
// int current = 0;

// do
// {
//     current = random.Next(1, 8);
//     Console.WriteLine(current);
//     if (current >= 5) continue;
//     Console.WriteLine(current);
// } while (current != 7);


// int hero = 10;
// int monster = 10;
// Random dice = new Random();
// do
// {
//     // Console.Write("Enter damage dealt by Hero to Monster: ");
//     int lostmonsterhealth = dice.Next(1, 11);

//     // Console.Write("Enter damage dealt by Monster to Hero: ");
//     int lostherohealth = dice.Next(1, 11);

//     monster -= lostmonsterhealth;
//     Console.WriteLine($"Monster lost {lostmonsterhealth} health and now has {monster} health.");

//     if (monster <= 0)
//     {
//         Console.WriteLine("Hero wins!");
//         break;
//     }

//     hero -= lostherohealth;
//     Console.WriteLine($"Hero lost {lostherohealth} health and now has {hero} health.");

//     if (hero <= 0)
//     {
//         Console.WriteLine("Monster wins!");
//         break;
//     }

// } while (hero > 0 && monster > 0);



// integer validator



// int i = 0;

// while (i != 5)
// {
//     Console.WriteLine("Enter the integer between 5 and 19");
//     var num = Console.ReadLine();
//     Console.WriteLine($"you have entered {num}");
//     Console.WriteLine("let us validate");
//     if (int.TryParse(num, out int number))
//     {
//         if (number >= 5 && number <= 19)
//         {
//             Console.WriteLine("you have entered valid number");
//             break;
//         }
//         else
//         {
//             Console.WriteLine("Sorry, you entered an invalid number, please try again");
//         }
//     }
//     else
//     {
//         Console.WriteLine("Invalid input format. Please enter an integer.");
//     }
//     i++;
// }


// string validator

// string[] position = { "Adminstration", "user", "Manager" };

// Console.WriteLine("Enter the role name (Administrator, Manager, or User)");
// int i = 0;
// while (i != 5)
// {
//     var role = Console.ReadLine();
//     Console.WriteLine($"you have entered {role}");
//     Console.WriteLine("let us validate");
//     if (role.Trim().ToLower() == "administrator" || role.Trim().ToLower() == "manager" || role.Trim().ToLower() == "user")
//     {
//         Console.WriteLine("you have entered valid role");
//         break;
//     }
//     else
//     {
//         Console.WriteLine("Sorry, you entered an invalid role, please try again");
//     }
//     i++;
// }



// string spillting


// string[] myStrings = new string[2] { "I like pizza. I like roast chicken. I like salad", "I like all three of the menu choices" };



// foreach (string myString in myStrings)
// {
//     string[] sentence = myString.Split('.');
//     foreach (string s in sentence)
//     {
//         Console.WriteLine(s.TrimStart());
//     }
// }


// pet info app


// Console.WriteLine("Welcome to the Contoso PetFriends app. Your main menu options are:");
// // the ourAnimals array will store the following: 
// string animalSpecies = "";
// string animalID = "";
// string animalAge = "";
// string animalPhysicalDescription = "";
// string animalPersonalityDescription = "";
// string animalNickname = "";

// // variables that support data entry
// int maxPets = 8;
// string? readResult;
// string menuSelection = "";

// // array used to store runtime data, there is no persisted data
// string[,] ourAnimals = new string[maxPets, 6];

// // Build the menu string
// string[] menuItems = {
//     "1. List all of our current pet information",
//     "2. Add a new animal friend to the ourAnimals array",
//     "3. Ensure animal ages and physical descriptions are complete",
//     "4. Ensure animal nicknames and personality descriptions are complete",
//     "5. Edit an animal's age",
//     "6. Edit an animal's personality description",
//     "7. Display all cats with a specified characteristic",
//     "8. Display all dogs with a specified characteristic"
// };

// // Display menu
// Console.WriteLine("Welcome to the Contoso PetFriends app. Your main menu options are:");
// foreach (string menuItem in menuItems)
// {
//     Console.WriteLine(menuItem);
// }

// // Get user selection
// Console.Write("\nEnter your selection (1-8): ");
// readResult = Console.ReadLine();
// if (readResult != null)
// {
//     menuSelection = readResult.Trim();
// }

// Console.WriteLine($"You selected menu option {menuSelection}.");

// // Process menu selection
// switch (menuSelection)
// {
//     case "1":
//         // List all of our current pet information
//         Console.WriteLine("\nHere are our current pets:");
//         for (int i = 0; i < maxPets; i++)
//         {
//             if (ourAnimals[i, 0] != "")
//             {
//                 Console.WriteLine($"\nID #: {ourAnimals[i, 1]}");
//                 Console.WriteLine($"Species: {ourAnimals[i, 0]}");
//                 Console.WriteLine($"Age: {ourAnimals[i, 2]}");
//                 Console.WriteLine($"Nickname: {ourAnimals[i, 5]}");
//                 Console.WriteLine($"Physical description: {ourAnimals[i, 3]}");
//                 Console.WriteLine($"Personality: {ourAnimals[i, 4]}");
//             }
//         }
//         Console.WriteLine("\nPress the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "2":
//         // Add a new animal friend to the ourAnimals array
//         Console.WriteLine("\nAdding a new animal to the pet database:");

//         // Find next available slot
//         int petCount = 0;
//         for (int i = 0; i < maxPets; i++)
//         {
//             if (ourAnimals[i, 0] != "")
//             {
//                 petCount++;
//             }
//         }

//         if (petCount < maxPets)
//         {
//             Console.Write("Enter 'dog' or 'cat' to begin a new entry: ");
//             readResult = Console.ReadLine();
//             if (readResult != null)
//             {
//                 animalSpecies = readResult.ToLower().Trim();
//                 if (animalSpecies == "dog" || animalSpecies == "cat")
//                 {
//                     animalID = animalSpecies.Substring(0, 1) + (petCount + 1).ToString();

//                     Console.Write("Enter the pet's age or enter ? if unknown: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         animalAge = readResult.Trim();
//                     }

//                     Console.Write("Enter a physical description of the pet: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         animalPhysicalDescription = readResult.Trim();
//                     }

//                     Console.Write("Enter a description of the pet's personality: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         animalPersonalityDescription = readResult.Trim();
//                     }

//                     Console.Write("Enter a nickname for the pet: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         animalNickname = readResult.Trim();
//                     }

//                     // Add to array
//                     ourAnimals[petCount, 0] = animalSpecies;
//                     ourAnimals[petCount, 1] = animalID;
//                     ourAnimals[petCount, 2] = animalAge;
//                     ourAnimals[petCount, 3] = animalPhysicalDescription;
//                     ourAnimals[petCount, 4] = animalPersonalityDescription;
//                     ourAnimals[petCount, 5] = animalNickname;

//                     Console.WriteLine($"New pet {animalNickname} ({animalID}) has been added to the database!");
//                 }
//                 else
//                 {
//                     Console.WriteLine("Invalid entry. Please enter 'dog' or 'cat'.");
//                 }
//             }
//         }
//         else
//         {
//             Console.WriteLine("We have reached our limit on the number of pets that we can manage.");
//         }
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "3":
//         // Ensure animal ages and physical descriptions are complete
//         Console.WriteLine("\nChecking for missing ages and physical descriptions:");
//         for (int i = 0; i < maxPets; i++)
//         {
//             if (ourAnimals[i, 0] != "")
//             {
//                 if (ourAnimals[i, 2] == "" || ourAnimals[i, 2] == "?")
//                 {
//                     Console.Write($"Enter an age for {ourAnimals[i, 1]} ({ourAnimals[i, 5]}): ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 2] = readResult.Trim();
//                     }
//                 }

//                 if (ourAnimals[i, 3] == "")
//                 {
//                     Console.Write($"Enter a physical description for {ourAnimals[i, 1]} ({ourAnimals[i, 5]}): ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 3] = readResult.Trim();
//                     }
//                 }
//             }
//         }
//         Console.WriteLine("Age and physical description fields are complete for all of our friends.");
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "4":
//         // Ensure animal nicknames and personality descriptions are complete
//         Console.WriteLine("\nChecking for missing nicknames and personality descriptions:");
//         for (int i = 0; i < maxPets; i++)
//         {
//             if (ourAnimals[i, 0] != "")
//             {
//                 if (ourAnimals[i, 5] == "")
//                 {
//                     Console.Write($"Enter a nickname for {ourAnimals[i, 1]}: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 5] = readResult.Trim();
//                     }
//                 }

//                 if (ourAnimals[i, 4] == "")
//                 {
//                     Console.Write($"Enter a personality description for {ourAnimals[i, 1]} ({ourAnimals[i, 5]}): ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 4] = readResult.Trim();
//                     }
//                 }
//             }
//         }
//         Console.WriteLine("Nickname and personality description fields are complete for all of our friends.");
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "5":
//         // Edit an animal's age
//         Console.WriteLine("\nEdit an animal's age:");
//         Console.Write("Enter the ID of the pet you want to edit: ");
//         readResult = Console.ReadLine();
//         if (readResult != null)
//         {
//             string searchID = readResult.Trim().ToLower();
//             bool found = false;

//             for (int i = 0; i < maxPets; i++)
//             {
//                 if (ourAnimals[i, 1].ToLower() == searchID)
//                 {
//                     Console.WriteLine($"Current age for {ourAnimals[i, 5]} ({ourAnimals[i, 1]}): {ourAnimals[i, 2]}");
//                     Console.Write("Enter the new age: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 2] = readResult.Trim();
//                         Console.WriteLine($"Age updated for {ourAnimals[i, 5]}!");
//                     }
//                     found = true;
//                     break;
//                 }
//             }

//             if (!found)
//             {
//                 Console.WriteLine("Pet ID not found.");
//             }
//         }
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "6":
//         // Edit an animal's personality description
//         Console.WriteLine("\nEdit an animal's personality description:");
//         Console.Write("Enter the ID of the pet you want to edit: ");
//         readResult = Console.ReadLine();
//         if (readResult != null)
//         {
//             string searchID = readResult.Trim().ToLower();
//             bool found = false;

//             for (int i = 0; i < maxPets; i++)
//             {
//                 if (ourAnimals[i, 1].ToLower() == searchID)
//                 {
//                     Console.WriteLine($"Current personality for {ourAnimals[i, 5]} ({ourAnimals[i, 1]}): {ourAnimals[i, 4]}");
//                     Console.Write("Enter the new personality description: ");
//                     readResult = Console.ReadLine();
//                     if (readResult != null)
//                     {
//                         ourAnimals[i, 4] = readResult.Trim();
//                         Console.WriteLine($"Personality description updated for {ourAnimals[i, 5]}!");
//                     }
//                     found = true;
//                     break;
//                 }
//             }

//             if (!found)
//             {
//                 Console.WriteLine("Pet ID not found.");
//             }
//         }
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "7":
//         // Display all cats with a specified characteristic
//         Console.WriteLine("\nSearch cats by characteristic:");
//         Console.Write("Enter a characteristic to search for in cats: ");
//         readResult = Console.ReadLine();
//         if (readResult != null)
//         {
//             string searchTerm = readResult.Trim().ToLower();
//             bool foundMatch = false;

//             Console.WriteLine($"\nCats matching '{searchTerm}':");
//             for (int i = 0; i < maxPets; i++)
//             {
//                 if (ourAnimals[i, 0] == "cat")
//                 {
//                     if (ourAnimals[i, 3].ToLower().Contains(searchTerm) || 
//                         ourAnimals[i, 4].ToLower().Contains(searchTerm))
//                     {
//                         Console.WriteLine($"\nID #: {ourAnimals[i, 1]}");
//                         Console.WriteLine($"Nickname: {ourAnimals[i, 5]}");
//                         Console.WriteLine($"Age: {ourAnimals[i, 2]}");
//                         Console.WriteLine($"Physical description: {ourAnimals[i, 3]}");
//                         Console.WriteLine($"Personality: {ourAnimals[i, 4]}");
//                         foundMatch = true;
//                     }
//                 }
//             }

//             if (!foundMatch)
//             {
//                 Console.WriteLine("No cats found with that characteristic.");
//             }
//         }
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     case "8":
//         // Display all dogs with a specified characteristic
//         Console.WriteLine("\nSearch dogs by characteristic:");
//         Console.Write("Enter a characteristic to search for in dogs: ");
//         readResult = Console.ReadLine();
//         if (readResult != null)
//         {
//             string searchTerm = readResult.Trim().ToLower();
//             bool foundMatch = false;

//             Console.WriteLine($"\nDogs matching '{searchTerm}':");
//             for (int i = 0; i < maxPets; i++)
//             {
//                 if (ourAnimals[i, 0] == "dog")
//                 {
//                     if (ourAnimals[i, 3].ToLower().Contains(searchTerm) || 
//                         ourAnimals[i, 4].ToLower().Contains(searchTerm))
//                     {
//                         Console.WriteLine($"\nID #: {ourAnimals[i, 1]}");
//                         Console.WriteLine($"Nickname: {ourAnimals[i, 5]}");
//                         Console.WriteLine($"Age: {ourAnimals[i, 2]}");
//                         Console.WriteLine($"Physical description: {ourAnimals[i, 3]}");
//                         Console.WriteLine($"Personality: {ourAnimals[i, 4]}");
//                         foundMatch = true;
//                     }
//                 }
//             }

//             if (!foundMatch)
//             {
//                 Console.WriteLine("No dogs found with that characteristic.");
//             }
//         }
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;

//     default:
//         Console.WriteLine("Invalid selection. Please enter a number between 1 and 8.");
//         Console.WriteLine("Press the Enter key to continue.");
//         readResult = Console.ReadLine();
//         break;
// }

// for (int i = 0; i < maxPets; i++)
// {
//     switch (i)
//     {
//         case 0:
//             animalSpecies = "dog";
//             animalID = "d1";
//             animalAge = "2";
//             animalPhysicalDescription = "medium sized cream colored female golden retriever weighing about 65 pounds. housebroken.";
//             animalPersonalityDescription = "loves to have her belly rubbed and likes to chase her tail. gives lots of kisses.";
//             animalNickname = "lola";
//             break;
//         case 1:
//             animalSpecies = "dog";
//             animalID = "d2";
//             animalAge = "9";
//             animalPhysicalDescription = "large reddish-brown male golden retriever weighing about 85 pounds. housebroken.";
//             animalPersonalityDescription = "loves to have his ears rubbed when he greets you at the door, or at any time! loves to lean-in and give doggy hugs.";
//             animalNickname = "loki";
//             break;
//         case 2:
//             animalSpecies = "cat";
//             animalID = "c3";
//             animalAge = "1";
//             animalPhysicalDescription = "small white female weighing about 8 pounds. litter box trained.";
//             animalPersonalityDescription = "friendly";
//             animalNickname = "Puss";
//             break;
//         case 3:
//             animalSpecies = "cat";
//             animalID = "c4";
//             animalAge = "?";
//             animalPhysicalDescription = "";
//             animalPersonalityDescription = "";
//             animalNickname = "";
//             break;
//         default:
//             animalSpecies = "";
//             animalID = "";
//             animalAge = "";
//             animalPhysicalDescription = "";
//             animalPersonalityDescription = "";
//             animalNickname = "";
//             break;
//     }

//     ourAnimals[i, 0] = animalSpecies;
//     ourAnimals[i, 1] = animalID;
//     ourAnimals[i, 2] = animalAge;
//     ourAnimals[i, 3] = animalPhysicalDescription;
//     ourAnimals[i, 4] = animalPersonalityDescription;
//     ourAnimals[i, 5] = animalNickname;
// }




// //



// data types conversion

using System.Globalization;
using System.IO.Compression;
using System.IO.Pipelines;
using System.Linq.Expressions;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text.Encodings.Web;
using Microsoft.VisualBasic;

// Integer to string toString()
// string to integer is int.parse(num) and convert.toint32(num)

// int first = 2;
// string second = "4";
// string result = first + (int.Parse(second)).ToString();
// int s = first + int.Parse(second);
// Console.WriteLine(s);
// Console.WriteLine(result);


// int value = (int)1.5m; // casting truncates
// Console.WriteLine(value);

// int value2 = Convert.ToInt32(1.5m); // converting rounds up
// Console.WriteLine(value2);

// string name = "Bob";
// Console.WriteLine(int.Parse(name));


// string value = "102";
// int result = 0;
// if (int.TryParse(value, out result))
// {
//     Console.WriteLine($"Measurement: {result}");
// }
// else
// {
//     Console.WriteLine("Unable to report the measurement.");
// }

// Console.WriteLine($"measurement: {50 + result}");


// string[] values = { "12.3", "45", "ABC", "11", "DEF" };
// String answerString = "";
// double total = 0;
// foreach (var value in values)
// {
//     if (double.TryParse(value, out double res))
//     {
//         total += res;

//     }
//     if (!double.TryParse(value, out _))
//     {
//         answerString += value;
//     }
// }
// Console.WriteLine($"Message: {answerString}");
// Console.WriteLine($"Total: {total}");


// Array helper functions -- sorting


// string[] pallets = ["B14", "A11", "B12", "A13"];

// Console.WriteLine("Sorted...");
// Array.Sort(pallets);
// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }

// Console.WriteLine("");
// Console.WriteLine("Reversed...");
// Array.Reverse(pallets);
// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }


// Array function Clear and resize of an array

// string[] pallets = ["B14", "A11", "B12", "A13"];
// Console.WriteLine("");

// Array.Clear(pallets, 0, 2);
// Console.WriteLine($"Clearing 2 ... count: {pallets.Length}");
// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }

// string[] pallets = ["B14", "A11", "B12", "A13"];
// Console.WriteLine("");



// Console.WriteLine("");
// Array.Resize(ref pallets, 6);


// pallets[4] = "C01";
// pallets[5] = "C02";

// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }
// Array.Clear(pallets, 2, 2); // this indicates the list,position to clear and number of element that needs to be cleared
// Console.WriteLine($"Resizing 6 ... count: {pallets.Length}");
// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }
// Array.Reverse(pallets); // revers the elements

// foreach (var pallet in pallets)
// {
//     Console.WriteLine($"-- {pallet}");
// }



// string pangram = "The quick brown fox jumps over the lazy dog";

// String[] splitting = pangram.Split(' ');

// for (int i = 0; i < splitting.Length; i++)
// {
//     char[] chars = splitting[i].ToCharArray();
//     Array.Reverse(chars);
//     splitting[i] = new string(chars);
// }
// string res = String.Join(" ", splitting);
// Console.WriteLine(res);



// string orderStream = "B123,C234,A345,C15,B177,G3003,C235,B179";

// string[] splitorderstream = orderStream.Split(',');

// Array.Sort(splitorderstream);
// foreach (var str in splitorderstream)
// {
//     if (str.Length == 4)
//     {
//         Console.WriteLine(str);
//     }
//     else
//     {
//         Console.WriteLine($"{str} -- Error");
//     }

// }


//string formating

// string first = "Hello";
// string second = "World";
// string result = string.Format("{0} {1}!", first, second);
// Console.WriteLine(result);

// string res = string.Format("{0} !", second);
// Console.WriteLine(res);


// integer formating

// decimal num = 242.21532352335m;
// int discount = 40;
// Console.WriteLine($"Price: {num:C} (Save {discount:C})");
// Console.WriteLine($"measurement {num:N5}");

// decimal tax = .36785m;
// Console.WriteLine($"Tax rate: {tax:P3}");

// decimal price = 67.55m;
// decimal salePrice = 59.99m;

// string yourDiscount = String.Format("You saved {0:C2} off the regular {1:C2} price. ", (price - salePrice), price);

// yourDiscount += $"A discount of {((price - salePrice) / price):P1}!"; //inserted
// Console.WriteLine(yourDiscount);


// int invoiceNumber = 1201;
// decimal productShares = 25.4568m;
// decimal subtotal = 2750.00m;
// decimal taxPercentage = .15825m;
// decimal total = 3185.19m;

// Console.WriteLine($"Invoice Number: {invoiceNumber}");
// Console.WriteLine($"   Shares: {productShares:N3} Product");
// Console.WriteLine($"     Sub Total: {subtotal:C}");
// Console.WriteLine($"           Tax: {taxPercentage:P2}");\
// string res = total.ToString("C").PadLeft(45);
// Console.WriteLine($"Total Billed: {res}");


// string str = "pad this";
// Console.WriteLine(str.PadLeft(12));



// string message = "Find what is (inside the parentheses)";

// int openingPosition = message.IndexOf('(');
// int closingPosition = message.IndexOf(')');

// Console.WriteLine(openingPosition);
// Console.WriteLine(closingPosition);

// int lengath = closingPosition - openingPosition + 1;

// openingPosition += 1;
// int length = closingPosition - openingPosition;
// Console.WriteLine(message.Substring(openingPosition, length));

// string message = "hello there!";

// int first_h = message.IndexOf('h');
// int last_h = message.LastIndexOf('h');

// Console.WriteLine($"For the message: '{message}', the first 'h' is at position {first_h} and the last 'h' is at position {last_h}.");



// public class Person
// {
//     public string Name { get; set; } // these are the properties that are used for the constructor
//     public int Age { get; set; }

//     public Person(string name, int age) // contructor A constructor is a special method that initializes new objects. It runs automatically when an object is created. It has the same name as the class and no return type (not even void).
//     {
//         Name = name;
//         Age = age;
//     }

//     public void Greet() //methods in C# Methods define actions or behaviors for the objects.
//     {
//         Console.WriteLine($"hi my name is {Name} and my age {Age}");
//         // Console.WriteLine(fname + " Refsnes");
//     }
// }

// class Mymethodlearning

// {

//     static void MyMethod(string fname, int age, string fav = "ice-cream")
//     {
//         Console.WriteLine(fname + " is " + age + " fav dish " + fav);
//     }

//     static void DisplayRandomnumber()
//     {
//         Random num = new Random();
//         for (int i = 0; i < 5; i++)
//         {
//             Console.Write($"{num.Next(1, 100)} ");
//         }
//         Console.WriteLine();
//     }
//     static void Main(String[] agrs)
//     {
//         Console.WriteLine("hi");
//         //When creating an object, the constructor is called like this:
//         Person person1 = new Person("alice", 23); //person1 is an object of type Person.
//         //Calling the method on an object:
//         person1.Greet();
//         MyMethod("Liam", 5, "cone");
//         MyMethod("Jenny", 8);
//         MyMethod("Anja", 31, "buttermilk");
//         Console.WriteLine("Random num");
//         DisplayRandomnumber();

//     }
// }



// class MedicineSchedule
// {

//     static void Main(String[] agrs)
//     {
//         int[] times = { 800, 1200, 1600, 2000 };
//         int diff = 0;

//         Console.WriteLine("Enter current GMT");
//         int currentGMT = Convert.ToInt32(Console.ReadLine());

//         Console.WriteLine("Current Medicine Schedule:");
//         DisplayTime();
//         Console.WriteLine("Enter new GMT");
//         int newGMT = Convert.ToInt32(Console.ReadLine());

//         if (Math.Abs(newGMT) > 12 || Math.Abs(currentGMT) > 12)
//         {
//             Console.WriteLine("Invalid GMT");
//         }
//         else if (newGMT <= 0 && currentGMT <= 0 || newGMT >= 0 && currentGMT >= 0)
//         {
//             diff = 100 * (Math.Abs(newGMT) - Math.Abs(currentGMT));
//             AdjustTimes();
//         }
//         else
//         {
//             diff = 100 * (Math.Abs(newGMT) + Math.Abs(currentGMT));
//             AdjustTimes();
//         }

//         Console.WriteLine("New Medicine Schedule:");
//         DisplayTime();

//         void DisplayTime()
//         {
//             foreach (var values in times)
//             {
//                 string time = values.ToString();
//                 int len = time.Length;

//                 if (len >= 3)
//                 {
//                     time = time.Insert(len - 2, ":");
//                 }
//                 else if (len == 2)
//                 {
//                     time = time.Insert(0, "0:");
//                 }
//                 else
//                 {
//                     time = time.Insert(0, "0:0");
//                 }
//                 Console.Write($"{time} ");
//             }
//             Console.WriteLine();
//         }

//         void AdjustTimes()
//         {
//             for (int i = 0; i < times.Length; i++)
//             {
//                 times[i] = ((times[i] + diff)) % 2400;
//             }
//         }
//     }
// }


// validation ip address

// class Solution
// {
//     static bool validLength;
//     static bool validZeroes;
//     static bool validRange;

//     static void Main(string[] args)
//     {
//         string[] ipv4Input = { "107.31.1.5", "255.0.0.255", "555..0.555", "255...255" };

//         foreach (string ip in ipv4Input)
//         {
//             validLengthCheck(ip);
//             validZeroesCheck(ip);
//             validRangeCheck(ip);

//             if (validLength && validZeroes && validRange)
//             {
//                 Console.WriteLine("True");
//             }
//             else
//             {
//                 Console.WriteLine("False");
//             }
//         }
//     }

//     static void validLengthCheck(string ip)
//     {
//         string[] address = ip.Split('.');
//         validLength = address.Length == 4;
//     }

//     static void validZeroesCheck(string ip)
//     {
//         validZeroes = true;
//         string[] address = ip.Split('.');

//         foreach (string num in address)
//         {
//             if (num.Length > 1 && num.StartsWith('0'))
//             {
//                 validZeroes = false;
//                 return;
//             }
//         }
//     }

//     static void validRangeCheck(string ip)
//     {
//         validRange = true;
//         string[] address = ip.Split('.');

//         foreach (string num in address)
//         {
//             if (!int.TryParse(num, out int value) || value < 0 || value > 255)
//             {
//                 validRange = false;
//                 return;
//             }
//         }
//     }
// }



//luck story

// class Solution
// {
//     static void Main(string[] args)
//     {
//         Random random = new Random();
//         int luck = random.Next(100);

//         string[] text = { "You have much to", "Today is a day to", "Whatever work you do", "This is an ideal time to" };
//         string[] good = { "look forward to.", "try new things!", "is likely to succeed.", "accomplish your dreams!" };
//         string[] bad = { "fear.", "avoid major decisions.", "may have unexpected outcomes.", "re-evaluate your life." };
//         string[] neutral = { "appreciate.", "enjoy time with friends.", "should align with your values.", "get in tune with nature." };

//         Luckstory(luck, text, good, bad, neutral);
//     }
//     static void Luckstory(int luck, string[] text, string[] good, string[] bad, string[] neutral)
//     {
//         Console.WriteLine("A fortune teller whispers the following words:");
//         Console.WriteLine("Enter predicted num: ");
//         int num = Convert.ToInt32(Console.ReadLine());
//         string[] fortune = (luck > num ? good : (luck < num ? bad : neutral));
//         for (int i = 0; i < 4; i++)
//         {
//             Console.Write($"{text[i]} {fortune[i]} ");
//         }

//     }

// }


// int[] schedule = { 800, 1200, 1600, 2000 };

// DisplayAdjustTime(schedule, 6, -6);

// void DisplayAdjustTime(int[] times, int currentGMT, int newGMT)
// {
//     int diff = 0;

//     if (Math.Abs(newGMT) > 12 || Math.Abs(currentGMT) > 12)
//     {
//         Console.WriteLine("Invalid GMT");
//     }
//     else if (newGMT <= 0 && currentGMT <= 0 || newGMT >= 0 && currentGMT >= 0)
//     {
//         diff = 100 * (Math.Abs(newGMT) - Math.Abs(currentGMT));
//     }
//     else
//     {
//         diff = 100 * (Math.Abs(newGMT) + Math.Abs(currentGMT));
//     }
//     for (int i = 0; i < times.Length; i++)
//     {
//         int newTime = ((times[i] + diff)) % 2400;
//         Console.WriteLine($"{times[i]} -> {newTime}");
//     }
//     foreach (var values in times)
//     {
//         string time = values.ToString();
//         int len = time.Length;

//         if (len >= 3)
//         {
//             time = time.Insert(len - 2, ":");
//         }
//         else if (len == 2)
//         {
//             time = time.Insert(0, "0:");
//         }
//         else
//         {
//             time = time.Insert(0, "0:0");
//         }
//         Console.Write($"{time} ");
//     }
// }



// double pi = 3.14159;

// void CircleArea(string radius)
// {
//     string[] splitradius = radius.Split(' ');
//     double num = Convert.ToDouble(splitradius[0]);
//     if (splitradius[1] == "diameter")
//     {
//         num /= 2;
//     }
//     else
//     {
//         num = num;
//     }
//     double area = pi * num * num;
//     Console.WriteLine($"Area of circle with radius {num} is {area}");
// }

// void CircleCircumference(String radius)
// {

//     string[] splitradius = radius.Split(' ');
//     double num = Convert.ToDouble(splitradius[0]);
//     if (splitradius[1] == "diameter")
//     {
//         num /= 2;
//     }
//     else
//     {
//         num = num;
//     }
//     double circumference = 2 * pi * num;
//     Console.WriteLine($"Circumference of circle with radius {radius} is {circumference}");
// }

// CircleArea("12 r");
// CircleCircumference("12 diameter");


// pass by value
// int a = 3;
// int b = 4;
// int c = 0;

// Multiply(a, b, c);
// Console.WriteLine($"global statement: {a} * {b} = {c}");

// void Multiply(int a, int b, int c)
// {
//     c = a * b;
//     Console.WriteLine($"inside Multiply method: {a} x {b} = {c}");
// }

// pass by reference
// int[] array = { 1, 2, 3, 4, 5 };

// PrintArray(array);
// Clear(array);
// PrintArray(array);

// void PrintArray(int[] array)
// {
//     foreach (int a in array)
//     {
//         Console.Write($"{a} ");
//     }
//     Console.WriteLine();
// }

// void Clear(int[] array)
// {
//     for (int i = 0; i < array.Length; i++)
//     {
//         array[i] = 0;
//     }
// }



// methods that used as return type



// double total = 0;
// double minimumSpend = 30.00;

// double[] items = { 15.97, 3.50, 12.25, 22.99, 10.98 };
// double[] discounts = { 0.30, 0.00, 0.10, 0.20, 0.50 };

// for (int i = 0; i < items.Length; i++)
// {
//     // Calculate the discounted price of the item
//     double discountedPrice = GetDiscountedPrice(i);

//     // Add the discounted price to the total
//     total += discountedPrice;
// }

// TotalMeetsMinimum();
// double totalamount = FormatDecimal(total);

// Console.WriteLine($"Total: ${totalamount}");


// double GetDiscountedPrice(int itemIndex)
// {
//     // Calculate the discounted price of the item
//     double discountedPrice = items[itemIndex] * (1 - discounts[itemIndex]);
//     return discountedPrice;
// }

// void TotalMeetsMinimum()
// {
//     // Check if the total meets the minimum
//     if (total > minimumSpend)
//     {
//         Console.WriteLine($"You meet the minimum purchase of ${minimumSpend} with a total of ${total}");
//     }
//     else
//     {
//         Console.WriteLine($"You not meet the minimum purchase of ${minimumSpend} with a total of ${total}");
//     }
// }

// double FormatDecimal(double input)
// {
//     // Format the double so only 2 decimal places are displayed
//     return Math.Round(input, 2);
// }



// string return 


// string input = "there are snakes at the zoo malayalam";

// string input1 = "there are snakes at the zoo";

// Console.WriteLine(isPalidrome(input));
// Console.WriteLine(isPalidrome(input1));
// Console.WriteLine(input);
// Console.WriteLine(ReverseSentence(input));
// string ReverseSentence(string input)
// {
//     string result = "";
//     string[] word = input.Split(" ");
//     foreach (var words in word)
//     {
//         result += ReverseWord(words) + " ";
//     }
//     return result.Trim();
// }

// string ReverseWord(string word)
// {
//     string res = "";
//     for (int i = word.Length - 1; i >= 0; i--)
//     {
//         res += word[i] + "";
//     }
//     return res;
// }

// Boolean isPalidrome(string input)
// {
//     string[] words = input.Split(" ");

//     foreach (var word in words)
//     {
//         if (word == ReverseWord(word))
//         {
//             return true;
//         }

//     }
//     return false;
// }


// Method that return array

// int target = 30;
// int[] coins = new int[] { 5, 5, 50, 25, 25, 10, 5 };
// int[,] result = TwoCoins(coins, target);

// if (result.Length == 0)
// {
//     Console.WriteLine("No two coins make change");
// }
// else
// {
//     Console.WriteLine("Change found at positions:");
//     for (int i = 0; i < result.GetLength(0); i++)
//     {
//         if (result[i, 0] == -1)
//         {
//             break;
//         }
//         Console.WriteLine($"{result[i, 0]},{result[i, 1]}");
//     }
// }

// int[,] TwoCoins(int[] coins, int target)
// {
//     int[,] result = { { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 }, { -1, -1 } };
//     int count = 0;

//     for (int curr = 0; curr < coins.Length; curr++)
//     {
//         for (int next = curr + 1; next < coins.Length; next++)
//         {
//             if (coins[curr] + coins[next] == target)
//             {
//                 result[count, 0] = curr;
//                 result[count, 1] = next;
//                 count++;
//             }
//             if (count == result.GetLength(0))
//             {
//                 return result;
//             }
//         }
//     }
//     return (count == 0) ? new int[0, 0] : result;
// }


// dice game


// Random random = new Random();

// Console.WriteLine("Would you like to play? (Y/N)");
// if (ShouldPlay())
// {
//     PlayGame();
// }

// void PlayGame()
// {
//     var play = true;

//     while (play)
//     {
//         int target = random.Next(1, 6);
//         int roll = random.Next(1, 6);

//         Console.WriteLine($"Roll a number greater than {target} to win!");
//         Console.WriteLine($"You rolled a {roll}");
//         WinOrLose(roll, target);
//         Console.WriteLine("\nPlay again? (Y/N)");

//         play = ShouldPlay();
//     }
// }

// void WinOrLose(int roll, int target)
// {
//     if (roll > target)
//     {
//         Console.WriteLine("You win!");
//     }
//     else
//     {
//         Console.WriteLine("You Lose!");
//     }
// }

// Boolean ShouldPlay()
// {
//     string input = Console.ReadLine().Trim().ToUpper();
//     return input == "Y" ? true : false;
// }


// mini project


// using System;

// string[] pettingZoo =
// {
//     "alpacas", "capybaras", "chickens", "ducks", "emus", "geese",
//     "goats", "iguanas", "kangaroos", "lemurs", "llamas", "macaws",
//     "ostriches", "pigs", "ponies", "rabbits", "sheep", "tortoises",
// };


// // RandomizeAnimals();
// // string[,] group = AssignGroup();
// // Console.WriteLine("School A");
// // PrintGroup(group);
// PlanSchoolVisit("School A");
// PlanSchoolVisit("School B", 3);
// PlanSchoolVisit("School C", 2);


// void RandomizeAnimals()
// {
//     Random random = new Random();
//     for (int i = 0; i < pettingZoo.Length; i++)
//     {
//         int r = random.Next(i, pettingZoo.Length);
//         string temp = pettingZoo[r];
//         pettingZoo[r] = pettingZoo[i];
//         pettingZoo[i] = temp;
//     }
// }

// string[,] AssignGroup(int groups = 6)
// {
//     string[,] result = new string[groups, pettingZoo.Length / groups];
//     int count = 0;
//     for (int i = 0; i < result.GetLength(0); i++)
//     {
//         for (int j = 0; j < result.GetLength(1); j++)
//         {
//             result[i, j] = pettingZoo[count];
//             count++;
//         }
//     }
//     return result;
// }

// void PrintGroup(string[,] group)
// {
//     for (int i = 0; i < group.GetLength(0); i++)
//     {
//         Console.Write($"Group {i + 1}: ");
//         for (int j = 0; j < group.GetLength(1); j++)
//         {
//             Console.Write($"{group[i, j]} ");
//         }
//         Console.WriteLine();
//     }
// }
// void PlanSchoolVisit(string schoolName, int groups = 6)
// {
//     RandomizeAnimals();
//     string[,] group = AssignGroup(groups);
//     Console.WriteLine(schoolName);
//     PrintGroup(group);
// }


// mini game project

// using System;

// Random random = new Random();
// Console.CursorVisible = false;
// int height = Console.WindowHeight - 1;
// int width = Console.WindowWidth - 5;
// bool shouldExit = false;

// // Console position of the player
// int playerX = 0;
// int playerY = 0;

// // Console position of the food
// int foodX = 0;
// int foodY = 0;

// // Available player and food strings
// string[] states = { "('-')", "(^-^)", "(X_X)" };
// string[] foods = { "@@@@@", "$$$$$", "#####" };

// // Current player string displayed in the Console
// string player = states[0];

// // Index of the current food
// int food = 0;

// InitializeGame();
// while (!shouldExit)
// {
//     if (TerminalResized())
//     {
//         // InitializeGame();
//         Console.Clear();
//         Console.WriteLine("Console window was resized. Program exiting.");


//     }
//     Move();
// }

// // Returns true if the Terminal was resized 
// bool TerminalResized()
// {
//     return height != Console.WindowHeight - 1 || width != Console.WindowWidth - 5;
// }

// // Displays random food at a random location
// void ShowFood()
// {
//     // Update food to a random index
//     food = random.Next(0, foods.Length);

//     // Update food position to a random location
//     foodX = random.Next(0, width - player.Length);
//     foodY = random.Next(0, height - 1);

//     // Display the food at the location
//     Console.SetCursorPosition(foodX, foodY);
//     Console.Write(foods[food]);
// }

// // Changes the player to match the food consumed
// void ChangePlayer()
// {
//     player = states[food];
//     Console.SetCursorPosition(playerX, playerY);
//     Console.Write(player);
// }

// // Temporarily stops the player from moving
// void FreezePlayer()
// {
//     System.Threading.Thread.Sleep(1000);
//     player = states[0];
// }

// // Reads directional input from the Console and moves the player
// void Move()
// {
//     int lastX = playerX;
//     int lastY = playerY;

//     switch (Console.ReadKey(true).Key)
//     {
//         case ConsoleKey.UpArrow:
//             playerY--;
//             break;
//         case ConsoleKey.DownArrow:
//             playerY++;
//             break;
//         case ConsoleKey.LeftArrow:
//             playerX--;
//             break;
//         case ConsoleKey.RightArrow:
//             playerX++;
//             break;
//         case ConsoleKey.Escape:
//             shouldExit = true;
//             break;
//     }

//     // Clear the characters at the previous position
//     Console.SetCursorPosition(lastX, lastY);
//     for (int i = 0; i < player.Length; i++)
//     {
//         Console.Write(" ");
//     }

//     // Keep player position within the bounds of the Terminal window
//     playerX = (playerX < 0) ? 0 : (playerX >= width ? width : playerX);
//     playerY = (playerY < 0) ? 0 : (playerY >= height ? height : playerY);

//     // Draw the player at the new location
//     Console.SetCursorPosition(playerX, playerY);
//     Console.Write(player);
// }

// // Clears the console, displays the food and player
// void InitializeGame()
// {
//     Console.Clear();
//     ShowFood();
//     Console.SetCursorPosition(0, 0);
//     Console.Write(player);
// }

// string[] students = new string[] { "Sophia", "Nicolas", "Zahirah", "Jeong" };

// int studentCount = students.Length;

// Console.WriteLine("The final name is: " + students[studentCount - 1]);


// try catch and finally

// try
// {
//     // Step 1: code execution begins
//     try
//     {
//         // Step 2: an exception occurs here
//     }
//     finally
//     {
//         // Step 4: the system executes the finally code block associated with the try statement where the exception occurred
//     }

// }
// catch // Step 3: the system finds a catch clause that can handle the exception
// {   
//    // Step 5: the system transfers control to the first line of the catch code block
// }


// ArrayTypeMismatchException: Thrown when an array can't store a given element because the actual type of the element is incompatible with the actual type of the array.
// DivideByZeroException: Thrown when an attempt is made to divide an integral value by zero.
// FormatException: Thrown when the format of an argument is invalid.
// IndexOutOfRangeException: Thrown when an attempt is made to index an array when the index is less than zero or outside the bounds of the array.
// InvalidCastException: Thrown when an explicit conversion from a base type to an interface or to a derived type fails at runtime.
// NullReferenceException: Thrown when an attempt is made to reference an object whose value is null.
// OverflowException: Thrown when an arithmetic operation in a checked context overflows.


// Arraytype mismatch exception

// string[] names = { "Dog", "Cat", "Fish" };
// Object[] objs = (Object[])names;

// Object obj = (Object)13;
// objs[2] = obj; // ArrayTypeMismatchException occurs


// int number1 = 3000;
// int number2 = 0;
// Console.WriteLine(number1 / number2); // DivideByZeroException occurs


// int valueEntered;
// string userValue = "two";
// valueEntered = int.Parse(userValue); // FormatException occurs



// int[] values1 = { 3, 6, 9, 12, 15, 18, 21 };
// int[] values2 = new int[7];

// values2[values1.Length] = values1[values1.Length - 2]; // IndexOutOfRangeException occurs



// double float1 = 3000.0;
// double float2 = 0.0;
// int number1 = 3000;
// int number2 = 0;
// try
// {
//     Console.WriteLine(float1 / float2);
//     Console.WriteLine(number1 / number2);
// }
// catch
// {
//     Console.WriteLine("An exception has been caught");
// }


// try
// {
//     Process1();
// }
// catch
// {
//     Console.WriteLine("Exception caught in");
// }

// Console.WriteLine("Exit program");

// static void Process1()
// {
//     try
//     {
//         WriteMessage();
//     }
//     catch (Exception e)
//     {
//         Console.WriteLine($"Exception caught in Process1: {e.Message}");
//     }
// }

// static void WriteMessage()
// {
//     double float1 = 3000.0;
//     double float2 = 0.0;
//     int number1 = 3000;
//     int number2 = 0;

//     Console.WriteLine(float1 / float2);
//     Console.WriteLine(number1 / number2);
// }



// try
// {
//     int num1 = int.MaxValue;
//     int num2 = int.MaxValue;
//     int result = num1 + num2;
//     Console.WriteLine("Result: " + result);

//     string str = null;
//     int length = str.Length;
//     Console.WriteLine("String Length: " + length);

//     int[] numbers = new int[5];
//     numbers[5] = 10;
//     Console.WriteLine("Number at index 5: " + numbers[5]);

//     int num3 = 10;
//     int num4 = 0;
//     int result2 = num3 / num4;
//     Console.WriteLine("Result: " + result2);
// }
// catch (OverflowException ex)
// {
//     Console.WriteLine("Error: The number is too large to be represented as an integer." + ex.Message);
// }
// catch (NullReferenceException ex)
// {
//     Console.WriteLine("Error: The reference is null." + ex.Message);
// }
// catch (IndexOutOfRangeException ex)
// {
//     Console.WriteLine("Error: Index out of range." + ex.Message);
// }
// catch (DivideByZeroException ex)
// {
//     Console.WriteLine("Error: Cannot divide by zero." + ex.Message);
// }

// Console.WriteLine("Exiting program.");


// ArgumentException invalidArgumentException = new ArgumentException("ArgumentException: The 'GraphData' method received data outside the expected range.");
// throw invalidArgumentException;


// string[][] userEnteredValues = new string[][]
// {
//         new string[] { "1", "two", "3"},
//         new string[] { "0", "1", "2"}
// };

// foreach (string[] userEntries in userEnteredValues)
// {
//     try
//     {
//         BusinessProcess1(userEntries);
//     }
//     catch (Exception ex)
//     {
//         if (ex.StackTrace.Contains("BusinessProcess1") && (ex is FormatException))
//         {
//             Console.WriteLine(ex.Message);
//         }
//     }
// }

// static void BusinessProcess1(string[] userEntries)
// {
//     int valueEntered;

//     foreach (string userValue in userEntries)
//     {
//         try
//         {
//             valueEntered = int.Parse(userValue);

//             // completes required calculations based on userValue
//             // ...
//         }
//         catch (FormatException)
//         {
//             FormatException invalidFormatException = new FormatException("FormatException: User input values in 'BusinessProcess1' must be valid integers");
//             throw invalidFormatException;
//         }
//     }
// }



// string[][] userEnteredValues = new string[][]
// {
//             new string[] { "1", "2", "3"},
//             new string[] { "1", "two", "3"},
//             new string[] { "0", "1", "2"}
// };

// string overallStatusMessage = "";

// overallStatusMessage = Workflow1(userEnteredValues);

// if (overallStatusMessage == "operating procedure complete")
// {
//     Console.WriteLine("'Workflow1' completed successfully.");
// }
// else
// {
//     Console.WriteLine("An error occurred during 'Workflow1'.");
//     Console.WriteLine(overallStatusMessage);
// }

// static string Workflow1(string[][] userEnteredValues)
// {
//     string operationStatusMessage = "good";
//     string processStatusMessage = "";

//     foreach (string[] userEntries in userEnteredValues)
//     {
//         processStatusMessage = Process1(userEntries);

//         if (processStatusMessage == "process complete")
//         {
//             Console.WriteLine("'Process1' completed successfully.");
//             Console.WriteLine();
//         }
//         else
//         {
//             Console.WriteLine("'Process1' encountered an issue, process aborted.");
//             Console.WriteLine(processStatusMessage);
//             Console.WriteLine();
//             operationStatusMessage = processStatusMessage;
//         }
//     }

//     if (operationStatusMessage == "good")
//     {
//         operationStatusMessage = "operating procedure complete";
//     }

//     return operationStatusMessage;
// }

// static string Process1(String[] userEntries)
// {
//     string processStatus = "clean";
//     string returnMessage = "";
//     int valueEntered;

//     foreach (string userValue in userEntries)
//     {
//         bool integerFormat = int.TryParse(userValue, out valueEntered);

//         if (integerFormat == true)
//         {
//             if (valueEntered != 0)
//             {
//                 checked
//                 {
//                     int calculatedValue = 4 / valueEntered;
//                 }
//             }
//             else
//             {
//                 returnMessage = "Invalid data. User input values must be non-zero values.";
//                 processStatus = "error";
//             }
//         }
//         else
//         {
//             returnMessage = "Invalid data. User input values must be valid integers.";
//             processStatus = "error";
//         }
//     }

//     if (processStatus == "clean")
//     {
//         returnMessage = "process complete";
//     }

//     return returnMessage;
// }


// int MultiplyNumbers(int num1, int num2)
// {
//     return num1 * num2;
// }

// Console.WriteLine(MultiplyNumbers(2, 3));

// int x = 5;
// double y = 2.7;

// float res = (float)(x / y);
// Console.WriteLine(res);

// int x = 5;
// int y = 3;
// int result = x + y;
// Console.WriteLine(result);


// int x = 5;
// if (x > 0)
// {
//     Console.WriteLine("Positive");
// }
// else if (x < 0)
// {
//     Console.WriteLine("Negative");
// }
// else
// {
//     Console.WriteLine("Zero");
// }


// int[] numbers = { 1, 2, 3, 4, 5 };
// foreach (int num in numbers)
// {
//     Console.WriteLine(num);
// }



// int n;

// Console.WriteLine(n);


// int i = 0;
// do
// {
//     Console.WriteLine(i);
//     i++;
// } while (i < 5);


// Arrays and list and dictonaires

// Array
// int[] scores = new int[] { 80, 75, 90 };

// // List
// List<string> fruits = new List<string> { "apple", "banana", "cherry" };

// // Dictionary
// Dictionary<int, string> students = new Dictionary<int, string>();
// students.Add(101, "Alice");
// students.Add(102, "Bob");


// // Printing values
// Console.WriteLine(scores[0]); // 80
// Console.WriteLine(fruits[1]); // banana
// Console.WriteLine(students[101]); // Alice


// LINQ (Language Integrated Query)
// Explanation:
// LINQ allows easy querying of collections using clear syntax:

// Common methods:

// Where: filters data

// OrderBy / OrderByDescending: sorts data

// Select: projects data into new form

// Average, Sum, Count: aggregate data


// List<int> numbers = new List<int> { 1, 5, 8, 20, 10, 30, 34, 634, 235, 1, 6523, 163, 135, 562, 63, 532 };

// Filtering numbers greater than 5
// var filtered = numbers.Where(n => n > 5);

// // Display results
// foreach (var num in filtered)
// {
//     Console.WriteLine(num); // 8, 10
// }

// // Sorting numbers descending
// var sorted = numbers.OrderByDescending(n => n);

// foreach (var num in sorted)
// {
//     Console.WriteLine(num); // 10, 8, 5, 3, 2, 1
// }


// List<int> numbers = new List<int> { 1, 5, 8, 20, 10, 30, 34, 634, 235, 1, 6523, 163, 135, 562, 63, 532 };

// foreach (var item in numbers)
// {
//     if (item > 10 && item % 2 == 0)
//     {
//         Console.WriteLine(item);
//     }
// }

// var filtered = numbers.Where(n => n > 10).OrderBy(n => n);

// foreach (var item in filtered)
// {
//     if (item % 2 == 0)
//     {
//         Console.WriteLine(item);
//     }
// }



// try catch and finally

// try
// {
//     Console.WriteLine("Enter a number:");
//     int num = int.Parse(Console.ReadLine());
//     Console.WriteLine($"You entered: {num}");
// }
// catch (FormatException)
// {
//     Console.WriteLine("Invalid input! Please enter a numeric value.");
// }
// finally
// {
//     Console.WriteLine("This will run whether an error occurs or not.");
// }

// storing employee details


var Employee = new Dictionary<int, (string Name, decimal Salary)>();

Employee.Add(101, ("Alice", 50000.00m));
Employee.Add(102, ("Bob", 45000.00m));
Employee.Add(103, ("Peter", 55000.00m));
Employee.Add(104, ("Giroud", 60000.00m));
Employee.Add(105, ("Rjbob", 48000.00m));

var filtered = Employee.OrderByDescending(n => n.Value.Salary);

foreach (var item in filtered)
{
    Console.WriteLine(item);
}


try
{
    Console.Write("Enter id: ");
    int enterid = int.Parse(Console.ReadLine());
    var emp = Employee[enterid]; // This throws an exception if key not found
    Console.WriteLine($"Name: {emp.Name}, Salary: {emp.Salary}");
}
catch (KeyNotFoundException)
{
    Console.WriteLine("Employee not found");
}
catch (FormatException)
{
    Console.WriteLine("Invalid input! Enter numeric ID.");
}



